\connect vz
SET client_encoding = 'UTF8';


CREATE TABLE vz.Request (
    Ip                  TEXT NOT NULL,    -- e.g. "73.240.47.68"
    Port                TEXT NOT NULL,    -- e.g. "62568"
    Method              TEXT NOT NULL,    -- e.g. "GET"
    Path                TEXT NOT NULL,    -- e.g. "/ip/"
    RawQuery            TEXT NOT NULL,    -- e.g. "" or "?x=5"
    Language            TEXT NOT NULL,    -- e.g. "en-US,en;q=0.9"
    Referer             TEXT NOT NULL,    -- e.g. full ip address of the previous website

    UserId              BIGINT,           -- userId if user is logged in; -1 otherwise

    Created             TIMESTAMPTZ  NOT NULL DEFAULT now()
);


with userid=-1, blacklist any POST request to /.  Or just blacklist any POST to /.
block any request ending in .php

[x] block if coming from bad IP
[x] block method=POST if not logged in
[x] ban an IP if any request ends in .php, .cgi, .cmd

// LIST ALL REQUEST, LOOK FOR HACKERS:
select method, substr(path, 0, 40) as path, count from vz.request order by path, method;


select created, userid, ip, port, method, substr(path, 0, 20) as path, substr(rawquery, 0, 20) as rawquery,
       substr(language, 0, 10) as language, substr(referer, 0, 20) as referer, created from vz.request order by created;


COPY (select userid, ip, port, method, substr(path, 0, 20) as path, substr(rawquery, 0, 20) as rawquery,
       substr(language, 0, 10) as language, substr(referer, 0, 20) as referer, created from vz.request order by userid, ip, path
     ) TO '/tmp/query.csv' (format csv, delimiter ';')


select userid, ip, port, method, substr(path, 0, 20) as path, substr(rawquery, 0, 40) as rawquery,
       substr(language, 0, 10) as language, substr(referer, 0, 20) as referer, created from vz.request where ip='69.160.160.54' order by userid, ip, path;

select ip, count(*) from vz.Request group by 1 order by 1;

safe IP's:
	 66.249.68.*  |       search engine
	 66.249.79.*  |	"

userId|
    5 | 73.240.47.68   - me
    7 | 63.155.48.187  - Ryan H
    8 | 172.58.75.27   - Steve1776
    8 | 172.58.75.92   - Steve1776
    8 | 172.58.78.233  - Steve1776
   22 | 38.29.179.150  - Pam

vz=# select id, username, email, name from vz.user;
 id |                 username                  |           email            |                name
----+-------------------------------------------+----------------------------+------------------------------------
  5 | RhymeStein                                | magicsquare15@gmail.com    | Aaron Smith
  6 | catch22                                   | henningsaiden@gmail.com    | Aiden xander Hennings
  8 | Steve1776                                 | coachsteve4u@gmail.com     | Steve Daugherty
  9 | Daddy                                     | munkey420@gmail.com        | Mike Munk
 10 | asmithgames                               | sheeple.game@gmail.com     | Aaron Smith
 11 | Gringo                                    | jbow12@yandex.com          |
 12 | ChicaWhisperer                            | ByronStiles@gmail.com      | Byron Stiles
 13 | jajdjkflo                                 | Fake.new@ggggggggaaron.com |
 14 | fakestdude69                              | fakeemail@micro.com        | Fake Suse
  7 | toomanycooks                              | ryanhennings@hotmail.com   | toomany cooks
 15 | mooooooooooosteeeeeeeeeeeeevilsinnnnnnner | evilsinner@gmail.com       | Good Boooooooooooooooooyyyyyyyyyyy
 16 | Timmy2shoes                               | fakestemail2@t.io          | Tim Cast
 17 | TedS54                                    | sewlow99@charter.net       |
 19 | Wombbear                                  | michaelkacinec@yahoo.com   | Michael Kacinec
 20 | Blues55                                   | parker510@comcast.net      | Thomas Parker
 21 | OldPathWhiteClouds                        | curveball7@gmail.com       | Rod Blanco
 22 | KwikChic                                  | whattheheck@sti.net        | Pamela McD




	101.51.144.253  |   965   <<<< hackers - TOT Public Company Limited
	106.13.33.80    |   960   <<<< hackers - Beijing Baidu Netcom Science and Technology Co., Ltd.
	118.193.31.180  |	  <<<< hackers - hi risk - Hong Knog				(language: zh-CN,zh;  or just blank)
	122.51.180.165  |         <<<< hackers - China - proxy/VPN detected
	195.54.160.21   |    14   - high risk - Russia
	104.244.78.107  |     4   - high risk - LU
	105.235.214.82  |     1   - high risk - SS (Africa)
	172.104.108.109 |         - high risk - JAP
	69.160.160.54   |         - high risk - US - 29 queries in seconds


dangerous range:
	109.108.240.174
	112.14.98.41
	112.14.98.41
	112.97.178.167
	112.97.178.167
	113.111.82.160
	113.203.110.249
	113.203.125.27
	113.203.75.17
	114.222.209.197
	114.222.209.197
	115.57.135.178
	117.136.12.163
	117.143.132.230
	117.154.99.168
	117.36.50.70
	118.193.31.180
	118.193.31.180
	118.193.31.180
	119.166.55.38
	119.166.55.38
	120.230.112.70
	120.231.218.177
	120.235.44.0
	122.51.180.165
	122.51.180.165
	122.97.239.30
	124.160.154.11
	124.64.19.163
	124.64.19.163
	128.14.209.226
	128.14.209.226
	128.14.209.226
	13.232.7.130
	158.58.101.217
	158.58.101.217
	164.138.166.108
	176.45.240.193
	178.131.119.145
	178.131.131.34
	188.229.25.104
	188.229.67.246
	188.240.121.27
	192.15.178.254
	192.15.178.254
	192.15.201.20
	192.15.54.1
	195.54.160.21
	2.176.37.199
	2.176.9.6
	2.177.73.81
	204.18.89.62
	221.3.31.164
	223.104.188.11
	31.2.219.125
	31.2.219.125
	37.129.126.33
	37.129.140.15
	37.129.146.16
	37.129.152.173
	37.129.157.202
	37.129.188.158
	37.129.84.230
	37.156.21.198
	37.49.230.118
	38.29.179.150
	40.114.126.163
	40.114.126.163
	40.114.126.163
	42.157.195.85
	42.236.189.213
	45.180.226.12
	45.92.126.74
	46.51.0.105
	46.51.17.207
	46.51.81.49
	49.143.32.6
	5.120.244.81
	5.120.244.81
	5.120.80.152
	5.123.164.80
	5.123.164.80
	5.126.205.31
	5.127.200.45
	5.127.200.45
	5.127.200.45
	5.127.200.45
	5.127.208.171
	5.127.208.171
	5.127.218.154
	5.127.218.154
	5.208.39.187
	5.209.101.184
	5.209.144.236
	5.209.52.41
	5.209.9.102
	5.209.90.156
	5.214.191.253
	5.218.147.236
	5.218.191.137
	5.22.105.204
	5.22.75.24
	5.250.119.105
	5.52.253.223
	5.8.10.202
	69.194.127.89
	69.194.65.140
	69.194.76.177
	71.6.232.9
	78.137.77.188
	78.187.193.85
	78.36.196.141
	83.120.185.83
	83.120.246.66
	83.120.246.66
	83.121.22.65
	83.122.107.166
	83.122.166.158
	83.122.37.113
	83.123.165.173
	83.123.238.177
	83.123.35.47
	83.123.47.194
	83.123.92.210
	83.123.93.33
	83.123.94.186
	83.97.20.31
	85.13.110.81
	85.239.209.222
	86.55.110.193
	86.55.13.51
	86.55.175.238
	86.55.2.103
	86.55.223.254
	86.55.225.160
	86.55.234.147
	86.55.30.51
	86.55.33.164
	86.55.39.243
	86.55.66.30
	86.55.90.254
	89.199.136.82
	89.199.141.138
	89.199.148.51
	89.199.204.222
	89.199.30.85
	91.133.172.76
	91.133.183.82
	91.133.195.67
	91.133.195.67
	91.133.212.233
	91.133.240.93
	91.133.241.139
	91.199.118.137
	91.199.118.137
	91.199.118.137
	91.251.128.249
	91.251.128.249
	91.251.134.16
	91.251.186.192
	93.110.110.236
	94.101.130.240


	hi-risk ip's from
	102.165.20.133
	103.136.251.88
	103.138.72.189
	103.30.92.5
	103.70.192.39
	103.77.76.172
	104.129.192.110
	104.129.196.175
	104.129.206.127
	104.140.53.155
	104.140.79.100
	104.143.92.254
	104.143.92.55
	104.225.182.189
	104.238.59.208
	104.244.209.102
	104.247.208.157
	104.37.31.22
	104.37.31.27
	107.158.255.36
	107.172.209.17
	107.173.69.204
	107.173.73.4
	116.203.25.217
	136.243.159.10
	137.135.73.235
	138.128.39.28
	138.128.39.60
	139.180.244.123
	141.98.216.228
	142.202.190.93
	144.48.38.164
	147.75.70.209
	152.208.32.4
	155.4.229.204
	156.146.48.200
	159.65.67.131
	160.238.197.2
	161.69.123.10
	163.116.129.120
	163.116.135.114
	165.225.216.191
	165.225.218.160
	165.225.226.117
	165.225.226.171
	165.225.227.35
	165.225.227.66
	165.225.38.190
	165.225.38.76
	165.227.126.220
	167.114.178.141
	167.99.48.174
	168.1.23.122
	168.149.142.3
	168.149.145.121
	168.181.27.103
	168.228.143.224
	168.228.143.43
	169.62.205.141
	172.104.138.152
	176.10.213.106
	176.113.72.60
	177.38.43.184
	177.38.47.170
	18.144.108.168
	184.105.19.98
	184.105.55.178
	184.75.210.98
	185.11.17.43
	185.213.151.51
	185.217.117.245
	185.221.68.52
	185.222.24.139
	185.229.59.127
	185.244.215.221
	185.25.142.131
	185.65.134.165
	185.8.86.221
	185.93.229.10
	190.104.218.154
	190.106.41.228
	191.232.179.102
	191.237.251.7
	191.238.213.124
	191.96.13.134
	191.96.4.159
	191.97.70.27
	191.97.70.34
	191.97.70.38
	192.139.37.238
	192.139.37.241
	192.241.243.52
	192.3.249.212
	193.176.211.59
	193.36.225.24
	193.42.96.112
	193.56.116.72
	194.207.216.4
	194.35.233.40
	194.59.251.194
	196.246.129.217
	196.247.50.68
	196.53.0.39
	198.147.22.132
	198.148.89.34
	198.16.66.195
	198.207.146.210
	198.255.66.27
	199.247.42.42
	199.247.43.125
	199.66.182.90
	199.96.248.4
	202.179.131.192
	205.134.182.33
	205.185.222.187
	206.83.251.77
	207.244.84.43
	208.110.119.2
	208.110.237.73
	208.116.151.26
	208.78.41.201
	208.78.41.80
	208.87.238.201
	209.107.188.135
	209.107.188.137
	209.107.191.157
	209.12.71.195
	209.126.1.118
	209.126.88.169
	209.141.53.254
	209.147.127.26
	209.99.82.118
	210.16.120.186
	212.1.124.210
	212.102.40.36
	212.102.53.129
	212.102.60.173
	213.232.87.193
	213.249.234.102
	216.25.186.206
	217.138.255.206
	3.91.98.137
	32.140.92.194
	37.120.148.94
	37.139.12.184
	40.89.145.240
	45.174.62.231
	45.32.214.220
	45.41.134.50
	45.56.142.235
	45.67.96.229
	45.77.9.147
	46.252.65.10
	5.149.253.57
	5.62.49.94
	5.62.51.55
	5.62.57.94
	51.210.6.241
	51.77.109.219
	54.203.245.137
	62.216.62.236
	64.114.251.79
	64.184.59.147
	64.44.42.20
	65.74.236.234
	66.11.117.105
	66.11.128.4
	66.115.184.156
	66.71.254.240
	68.183.195.49
	68.183.199.130
	69.77.200.62
	69.77.241.176
	70.32.0.113
	70.32.0.114
	70.32.2.160
	70.39.24.224
	74.63.191.134
	77.105.226.44
	77.111.246.40
	77.86.16.250
	78.47.249.246
	79.124.89.78
	80.87.219.100
	82.109.174.136
	82.145.223.83
	83.100.244.165
	83.148.222.117
	84.17.42.114
	85.115.52.202
	85.115.54.201
	85.203.34.114
	85.203.46.197
	86.106.87.240
	88.125.138.47
	89.187.170.158
	94.118.64.238
	94.46.167.73
	95.183.51.23
	98.128.179.130












// Start building query for activity / notifications:
SELECT p.id, userid, u.username, title FROM vz.post p join vz.user



View posts by each user:
select p.id, userid, u.username, title from vz.post p join vz.user u on p.userid = u.id order by userid;

View comments by each user:
select c.id, userid, u.username, substring(text, 0, 20) from vz.comment c join vz.user u on c.userid = u.id order by userid

View up/down votes by each user:
select v.created, v.up, v.postid, u.id, u.username, p.title from vz.postvote v join vz.user u on v.userid = u.id join vz.post p on p.id = v.postid order by u.id;

View poll votes by each user:
select v.voteoptionids, v.voteamounts, v.pollid, u.id, u.username, p.title from vz.pollvote v join vz.user u on v.userid = u.id join vz.post p on p.id = v.pollid order by u.id;


   WITH posts AS (SELECT * FROM vz.PollPost),
	votes AS (
		SELECT PostId,
			   SUM(CASE WHEN Up THEN 1 ELSE -1 END) AS VoteTally
		FROM vz.PostVote
		WHERE PostId IN (SELECT Id FROM posts)
		GROUP BY PostId
	)
		SELECT posts.Id, posts.Title,
		       COALESCE(votes.VoteTally, 0) AS VoteTally,
		       posts.Created,
			posts.Created +
				interval '12 hours' *
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderBy,
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderByMetric,

						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					AS OrderByMetricLinear
	FROM posts
	LEFT JOIN votes ON posts.Id = votes.PostId
	ORDER BY OrderBy DESC;






SELECT *
FROM (
	SELECT
		*,
		ROW_NUMBER() OVER (PARTITION BY Category ORDER BY
			OrderBy DESC) AS r
	FROM (


   WITH posts AS (SELECT * FROM vz.PollPost),
	votes AS (
		SELECT PostId,
			   SUM(CASE WHEN Up THEN 1 ELSE -1 END) AS VoteTally
		FROM vz.PostVote
		WHERE PostId IN (SELECT Id FROM posts)
		GROUP BY PostId
	)
		SELECT posts.Id,
		       posts.Title,
		       COALESCE(votes.VoteTally, 0) AS VoteTally,
		       'polls' AS Category,
		       posts.Created,
			posts.Created +
				interval '12 hours' *
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderBy,
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderByMetric,

						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					AS OrderByMetricLinear
	FROM posts
	LEFT JOIN votes ON posts.Id = votes.PostId
	ORDER BY OrderBy DESC

	) x
) x
WHERE x.r <= 4;



Debugging new better sorting algorithm, so crappy polls don't get stuck at the top:

SELECT *
FROM (
	SELECT
		*,
		ROW_NUMBER() OVER (PARTITION BY Category ORDER BY OrderBySimple DESC) AS r
	FROM (


   WITH posts AS (SELECT * FROM vz.PollPost),
	votes AS (
		SELECT PostId,
			   SUM(CASE WHEN Up THEN 1 ELSE -1 END) AS VoteTally
		FROM vz.PostVote
		WHERE PostId IN (SELECT Id FROM posts)
		GROUP BY PostId
	)
		SELECT posts.Id,
		       posts.Title,
		       COALESCE(votes.VoteTally, 0) AS VoteTally,
		       'polls' AS Category,
		       posts.Created,
			posts.Created +
				interval '12 hours' *
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderBy,
					posts.Created + interval '12 hours' *
					(
							5 * (5 * COALESCE(votes.VoteTally, 0) +
							     2 * posts.NumComments) +
							5 * (0)
					) AS OrderBySimple,
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderByMetric,

						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					AS OrderByMetricLinear,
						(
							5 * (5 * COALESCE(votes.VoteTally, 0) +
							     2 * posts.NumComments) +
							5 * (0)
						)
					AS OrderByMetricSimple
	FROM posts
	LEFT JOIN votes ON posts.Id = votes.PostId
	ORDER BY OrderBySimple DESC

	) x
) x
WHERE x.r <= 15;



   WITH posts AS (SELECT * FROM vz.PollPost),
	votes AS (
		SELECT PostId,
			   SUM(CASE WHEN Up THEN 1 ELSE -1 END) AS VoteTally
		FROM vz.PostVote
		WHERE PostId IN (SELECT Id FROM posts)
		GROUP BY PostId
	)
		SELECT posts.Id,
		       posts.Title,
		       COALESCE(votes.VoteTally, 0) AS VoteTally,
		       'polls' AS Category,
		       posts.Created,
			posts.Created +
				interval '12 hours' *
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderBy,
					posts.Created + interval '12 hours' *
					(
							5 * (5 * COALESCE(votes.VoteTally, 0) +
							     2 * posts.NumComments) +
							5 * (0)
					) AS OrderBySimple,
					LOG(
						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					) AS OrderByMetric,

						GREATEST(
							5 * (5 +
								 5 * GREATEST(COALESCE(votes.VoteTally, 0), 0) +
								 2 * posts.NumComments) +
							5 * (0) +
							2 * (LEAST(COALESCE(votes.VoteTally, 0), 0)),
							1
						)
					AS OrderByMetricLinear,
						(
							5 * (5 * COALESCE(votes.VoteTally, 0) +
							     2 * posts.NumComments) +
							5 * (0)
						)
					AS OrderByMetricSimple
	FROM posts
	LEFT JOIN votes ON posts.Id = votes.PostId
	ORDER BY OrderBySimple DESC

	) x
) x
WHERE x.r <= 15;




